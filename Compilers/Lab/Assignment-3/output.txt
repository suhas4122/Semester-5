
SINGLE_LINE_COMMENT, 8, //  PLEASE NOTE : The following C code is syntactically INCORRECT. The given arrangement is done to make testing of flex specifictions easy

PUNCTUATOR, 7, #

IDENTIFIER, 2, include

PUNCTUATOR, 7, <

IDENTIFIER, 2, stdio

PUNCTUATOR, 7, .

IDENTIFIER, 2, h

PUNCTUATOR, 7, >

KEYWORD, 1, int

IDENTIFIER, 2, binarySearch

PUNCTUATOR, 7, (

KEYWORD, 1, int

IDENTIFIER, 2, arr

PUNCTUATOR, 7, [

PUNCTUATOR, 7, ]

PUNCTUATOR, 7, ,

KEYWORD, 1, int

IDENTIFIER, 2, l

PUNCTUATOR, 7, ,

KEYWORD, 1, int

IDENTIFIER, 2, r

PUNCTUATOR, 7, ,

KEYWORD, 1, int

IDENTIFIER, 2, x

PUNCTUATOR, 7, )

PUNCTUATOR, 7, {

KEYWORD, 1, if

PUNCTUATOR, 7, (

IDENTIFIER, 2, r

PUNCTUATOR, 7, >=

IDENTIFIER, 2, l

PUNCTUATOR, 7, )

PUNCTUATOR, 7, {

KEYWORD, 1, int

IDENTIFIER, 2, mid

PUNCTUATOR, 7, =

IDENTIFIER, 2, l

PUNCTUATOR, 7, +

PUNCTUATOR, 7, (

IDENTIFIER, 2, r

PUNCTUATOR, 7, -

IDENTIFIER, 2, l

PUNCTUATOR, 7, )

PUNCTUATOR, 7, /

INTEGER CONSTANT, 3, 2

PUNCTUATOR, 7, ;

KEYWORD, 1, if

PUNCTUATOR, 7, (

IDENTIFIER, 2, arr

PUNCTUATOR, 7, [

IDENTIFIER, 2, mid

PUNCTUATOR, 7, ]

PUNCTUATOR, 7, ==

IDENTIFIER, 2, x

PUNCTUATOR, 7, )

KEYWORD, 1, return

IDENTIFIER, 2, mid

PUNCTUATOR, 7, ;

KEYWORD, 1, if

PUNCTUATOR, 7, (

IDENTIFIER, 2, arr

PUNCTUATOR, 7, [

IDENTIFIER, 2, mid

PUNCTUATOR, 7, ]

PUNCTUATOR, 7, >

IDENTIFIER, 2, x

PUNCTUATOR, 7, )

KEYWORD, 1, return

IDENTIFIER, 2, binarySearch

PUNCTUATOR, 7, (

IDENTIFIER, 2, arr

PUNCTUATOR, 7, ,

IDENTIFIER, 2, l

PUNCTUATOR, 7, ,

IDENTIFIER, 2, mid

PUNCTUATOR, 7, -

INTEGER CONSTANT, 3, 1

PUNCTUATOR, 7, ,

IDENTIFIER, 2, x

PUNCTUATOR, 7, )

PUNCTUATOR, 7, ;

KEYWORD, 1, return

IDENTIFIER, 2, binarySearch

PUNCTUATOR, 7, (

IDENTIFIER, 2, arr

PUNCTUATOR, 7, ,

IDENTIFIER, 2, mid

PUNCTUATOR, 7, +

INTEGER CONSTANT, 3, 1

PUNCTUATOR, 7, ,

IDENTIFIER, 2, r

PUNCTUATOR, 7, ,

IDENTIFIER, 2, x

PUNCTUATOR, 7, )

PUNCTUATOR, 7, ;

PUNCTUATOR, 7, }

KEYWORD, 1, return

PUNCTUATOR, 7, -

INTEGER CONSTANT, 3, 1

PUNCTUATOR, 7, ;

PUNCTUATOR, 7, }

KEYWORD, 1, int

IDENTIFIER, 2, main

PUNCTUATOR, 7, (

PUNCTUATOR, 7, )

PUNCTUATOR, 7, {

SINGLE_LINE_COMMENT, 8, //Testing Keywords

KEYWORD, 1, break

KEYWORD, 1, case

KEYWORD, 1, char

KEYWORD, 1, continue

KEYWORD, 1, default

KEYWORD, 1, do

KEYWORD, 1, double

KEYWORD, 1, else

KEYWORD, 1, extern

KEYWORD, 1, float

KEYWORD, 1, for

KEYWORD, 1, goto

KEYWORD, 1, if

KEYWORD, 1, int

KEYWORD, 1, long

KEYWORD, 1, return

KEYWORD, 1, short

KEYWORD, 1, sizeof

KEYWORD, 1, static

KEYWORD, 1, struct

KEYWORD, 1, switch

KEYWORD, 1, typedef

KEYWORD, 1, union

KEYWORD, 1, void

KEYWORD, 1, while

SINGLE_LINE_COMMENT, 8, // Testing Punctuators

PUNCTUATOR, 7, ->

PUNCTUATOR, 7, ~

PUNCTUATOR, 7, !

PUNCTUATOR, 7, %

PUNCTUATOR, 7, <<

PUNCTUATOR, 7, >>

PUNCTUATOR, 7, <

PUNCTUATOR, 7, >

PUNCTUATOR, 7, <=

PUNCTUATOR, 7, >=

PUNCTUATOR, 7, :

PUNCTUATOR, 7, ;

PUNCTUATOR, 7, ...

PUNCTUATOR, 7, *=

PUNCTUATOR, 7, /=

PUNCTUATOR, 7, %=

PUNCTUATOR, 7, +=

PUNCTUATOR, 7, -=

PUNCTUATOR, 7, <<=

PUNCTUATOR, 7, #

PUNCTUATOR, 7, --

PUNCTUATOR, 7, )

PUNCTUATOR, 7, &

PUNCTUATOR, 7, >>=

PUNCTUATOR, 7, !=

PUNCTUATOR, 7, &=

PUNCTUATOR, 7, ^

PUNCTUATOR, 7, |

PUNCTUATOR, 7, ^=

PUNCTUATOR, 7, &&

PUNCTUATOR, 7, ||

PUNCTUATOR, 7, |=

SINGLE_LINE_COMMENT, 8, //Testing Identifiers and Constants

KEYWORD, 1, int

IDENTIFIER, 2, i

PUNCTUATOR, 7, =

INTEGER CONSTANT, 3, 89

PUNCTUATOR, 7, ;

KEYWORD, 1, float

IDENTIFIER, 2, f1

PUNCTUATOR, 7, =

FLOAT CONSTANT, 4, 3425.896

PUNCTUATOR, 7, ;

KEYWORD, 1, float

IDENTIFIER, 2, f2

PUNCTUATOR, 7, =

FLOAT CONSTANT, 4, 12E-2

PUNCTUATOR, 7, ;

KEYWORD, 1, double

IDENTIFIER, 2, f3

PUNCTUATOR, 7, =

FLOAT CONSTANT, 4, 55e+92

PUNCTUATOR, 7, ;

KEYWORD, 1, int

IDENTIFIER, 2, array

PUNCTUATOR, 7, [

PUNCTUATOR, 7, ]

PUNCTUATOR, 7, =

PUNCTUATOR, 7, {

INTEGER CONSTANT, 3, 4

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 6

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 7

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 84

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 3

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 5

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 7

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 3

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 66

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 67

PUNCTUATOR, 7, }

PUNCTUATOR, 7, ;

KEYWORD, 1, char

IDENTIFIER, 2, c

PUNCTUATOR, 7, =

CHARACTER CONSTANT, 5, 'y'

PUNCTUATOR, 7, ;

IDENTIFIER, 2, string

IDENTIFIER, 2, s

PUNCTUATOR, 7, =

STRING LITERAL, 6, "This is a test for string literal \n \t"

PUNCTUATOR, 7, ;

MULTI_LINE_COMMENT, 9, /*

MULTI_LINE_COMMENT, 9,  

MULTI_LINE_COMMENT, 9, T

MULTI_LINE_COMMENT, 9, e

MULTI_LINE_COMMENT, 9, s

MULTI_LINE_COMMENT, 9, t

MULTI_LINE_COMMENT, 9,  

MULTI_LINE_COMMENT, 9, f

MULTI_LINE_COMMENT, 9, o

MULTI_LINE_COMMENT, 9, r

MULTI_LINE_COMMENT, 9,  

MULTI_LINE_COMMENT, 9, m

MULTI_LINE_COMMENT, 9, u

MULTI_LINE_COMMENT, 9, l

MULTI_LINE_COMMENT, 9, t

MULTI_LINE_COMMENT, 9, i

MULTI_LINE_COMMENT, 9,  

MULTI_LINE_COMMENT, 9, 


MULTI_LINE_COMMENT, 9, 	

MULTI_LINE_COMMENT, 9, h

MULTI_LINE_COMMENT, 9, e

MULTI_LINE_COMMENT, 9, y

MULTI_LINE_COMMENT, 9,  

MULTI_LINE_COMMENT, 9, s

MULTI_LINE_COMMENT, 9, u

MULTI_LINE_COMMENT, 9, h

MULTI_LINE_COMMENT, 9, a

MULTI_LINE_COMMENT, 9, s

MULTI_LINE_COMMENT, 9, 


MULTI_LINE_COMMENT, 9, 	

MULTI_LINE_COMMENT, 9, l

MULTI_LINE_COMMENT, 9, i

MULTI_LINE_COMMENT, 9, n

MULTI_LINE_COMMENT, 9, e

MULTI_LINE_COMMENT, 9,  

MULTI_LINE_COMMENT, 9, c

MULTI_LINE_COMMENT, 9, o

MULTI_LINE_COMMENT, 9, m

MULTI_LINE_COMMENT, 9, m

MULTI_LINE_COMMENT, 9, e

MULTI_LINE_COMMENT, 9, n

MULTI_LINE_COMMENT, 9, t

MULTI_LINE_COMMENT, 9,  

MULTI_LINE_COMMENT, 9, */

SINGLE_LINE_COMMENT, 8, // Test for single line comment 

KEYWORD, 1, int

IDENTIFIER, 2, pos

PUNCTUATOR, 7, =

IDENTIFIER, 2, binarySearch

PUNCTUATOR, 7, (

IDENTIFIER, 2, array

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 0

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 9

PUNCTUATOR, 7, ,

INTEGER CONSTANT, 3, 66

PUNCTUATOR, 7, )

PUNCTUATOR, 7, ;

KEYWORD, 1, int

IDENTIFIER, 2, val

PUNCTUATOR, 7, =

PUNCTUATOR, 7, (

INTEGER CONSTANT, 3, 5

PUNCTUATOR, 7, >

INTEGER CONSTANT, 3, 3

PUNCTUATOR, 7, )

PUNCTUATOR, 7, ?

INTEGER CONSTANT, 3, 3

PUNCTUATOR, 7, :

INTEGER CONSTANT, 3, 2

PUNCTUATOR, 7, ;

KEYWORD, 1, int

IDENTIFIER, 2, j

PUNCTUATOR, 7, =

INTEGER CONSTANT, 3, 0

PUNCTUATOR, 7, ;

KEYWORD, 1, int

IDENTIFIER, 2, val

PUNCTUATOR, 7, =

FLOAT CONSTANT, 4, 12.5

PUNCTUATOR, 7, ;

KEYWORD, 1, while

PUNCTUATOR, 7, (

IDENTIFIER, 2, val

PUNCTUATOR, 7, <

INTEGER CONSTANT, 3, 5

PUNCTUATOR, 7, &&

IDENTIFIER, 2, val

PUNCTUATOR, 7, >

INTEGER CONSTANT, 3, 0

PUNCTUATOR, 7, )

PUNCTUATOR, 7, {

IDENTIFIER, 2, val

PUNCTUATOR, 7, ++

PUNCTUATOR, 7, ;

IDENTIFIER, 2, val

PUNCTUATOR, 7, --

PUNCTUATOR, 7, ;

IDENTIFIER, 2, val

PUNCTUATOR, 7, /=

INTEGER CONSTANT, 3, 2

PUNCTUATOR, 7, ;

IDENTIFIER, 2, val

PUNCTUATOR, 7, *=

INTEGER CONSTANT, 3, 4

PUNCTUATOR, 7, ;

IDENTIFIER, 2, val

PUNCTUATOR, 7, =

IDENTIFIER, 2, val

PUNCTUATOR, 7, *

INTEGER CONSTANT, 3, 10

PUNCTUATOR, 7, ;

IDENTIFIER, 2, val

PUNCTUATOR, 7, =

IDENTIFIER, 2, val

PUNCTUATOR, 7, +

INTEGER CONSTANT, 3, 10

PUNCTUATOR, 7, ;

IDENTIFIER, 2, val

PUNCTUATOR, 7, =

IDENTIFIER, 2, val

PUNCTUATOR, 7, -

INTEGER CONSTANT, 3, 10

PUNCTUATOR, 7, ;

IDENTIFIER, 2, val

PUNCTUATOR, 7, =

IDENTIFIER, 2, val

PUNCTUATOR, 7, /

INTEGER CONSTANT, 3, 10

PUNCTUATOR, 7, ;

IDENTIFIER, 2, val

PUNCTUATOR, 7, =

IDENTIFIER, 2, val

PUNCTUATOR, 7, %

INTEGER CONSTANT, 3, 10

PUNCTUATOR, 7, ;

KEYWORD, 1, int

IDENTIFIER, 2, x

PUNCTUATOR, 7, =

KEYWORD, 1, sizeof

PUNCTUATOR, 7, (

KEYWORD, 1, char

PUNCTUATOR, 7, )

PUNCTUATOR, 7, ;

KEYWORD, 1, if

PUNCTUATOR, 7, (

IDENTIFIER, 2, val

PUNCTUATOR, 7, ==

INTEGER CONSTANT, 3, 0

PUNCTUATOR, 7, )

KEYWORD, 1, break

PUNCTUATOR, 7, ;

PUNCTUATOR, 7, }

KEYWORD, 1, return

INTEGER CONSTANT, 3, 0

PUNCTUATOR, 7, ;

PUNCTUATOR, 7, }
